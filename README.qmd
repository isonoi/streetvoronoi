---
format: gfm
title: "Voronoiesque polygons based on travel times isochrones"
warning: false
echo: false
---

# Pre-requisites

The code underlying this paper requires R to be installed.

```{r}
#| label: setup
# #| include: false
library(sf)
library(osmextract)
library(dplyr)
library(tmap)
```

# Input data

The input datasets for the example data are as follows:

- Street network in a 1 km buffer around central Oldenburg
- 4 pubs in Oldenburg

```{r}
#| label: extract-osm-data
oldenburg_centroid = osmextract:::oe_search("Oldenburg, Germany")
oldenburg_poly = zonebuilder::zb_zone(oldenburg_centroid, n_circles = 1)
# mapview::mapview(oldenburg_poly)
# oldenburg_walking_network = oe_get_network(oldenburg_poly, "walking", boundary = oldenburg_poly, boundary_type = "clipsrc")
# plot(oldenburg_walking_network$geometry)
# sf::write_sf(oldenburg_walking_network, "oldenburg_walking_network.geojson")
oldenburg_walking_network = sf::read_sf("oldenburg_walking_network.geojson")
# oldenburg_pubs = oe_get(oldenburg_poly, extra_tags = c("amenity"), query = "SELECT * FROM points WHERE amenity = 'pub'", boundary = oldenburg_poly, boundary_type = "clipsrc")
# oldenburg_pubs = oldenburg_pubs |>
#   select(name, osm_id)
# mapview::mapview(oldenburg_pubs)
# oldenburg_pubs = oldenburg_pubs |>
#   filter(stringr::str_detect(name, "Ben|Gast|AU|Kar"))
# sf::write_sf(oldenburg_pubs, "oldenburg_pubs.geojson", delete_dsn = TRUE)
oldenburg_pubs = sf::read_sf("oldenburg_pubs.geojson")
tm_shape(oldenburg_walking_network) + tm_lines() + tm_shape(oldenburg_pubs) + tm_dots(col = "red", size = 5)
```

# Voronoi polygons

```{r}
#| label: voronois
oldenburg_voronoi = stplanr::geo_projected(oldenburg_pubs, sf::st_voronoi) # fails
# crsuggest::suggest_crs(oldenburg_pubs)
# 5652
local_crs = "EPSG:5652"
oldenburg_pubs_projected = st_transform(oldenburg_pubs, local_crs)
oldenburg_poly_projected = st_transform(oldenburg_poly, local_crs)
oldenburg_voronoi_projected = st_voronoi(st_union(oldenburg_pubs_projected), oldenburg_poly_projected$geometry)
oldenburg_voronoi_projected_polygons = st_collection_extract(oldenburg_voronoi_projected, type = "POLYGON")
oldenburg_voronoi = st_transform(oldenburg_voronoi_projected_polygons, "EPSG:4326")
oldenburg_voronoi = sf::st_join(st_as_sf(oldenburg_voronoi), oldenburg_pubs |> select(osm_id))
oldenburg_voronoi = left_join(st_drop_geometry(oldenburg_pubs), oldenburg_voronoi) |> 
  st_as_sf()
tm_shape(oldenburg_voronoi) + tm_polygons() + tm_shape(oldenburg_pubs) + tm_dots(col = "red", size = 0.8)
```

# Isochrones

```{r}
# osrm_iso = osrm::osrmIsochrone(loc = oldenburg_pubs[2, ], breaks = c(2, 4, 6, 8), osrm.profile = "foot")
# sf::write_sf(osrm_iso, "osrm_iso_1.geojson", delete_dsn = TRUE)
osrm_iso = read_sf("osrm_iso_1.geojson")
osrm_iso
tmap_options(check.and.fix = TRUE)
tm_shape(oldenburg_voronoi) +
  tm_borders(lwd = 5) +
  tm_shape(osrm_iso) +
  tm_polygons(col = "isomax", alpha = 0.3) +
  tm_shape(oldenburg_pubs) +
  tm_dots()

```

# Next steps with isochrone polygon intersection approach

The example above demonstrates the calculation of voronoi polygons and isochrone polygons associated with points.
To get from this example to catchment areas associated with travel times, building on the approach of calculating multiple isochrones, a number of problems need to be solved:

- Iterative union of isochrone polygons associated with each point for which there are no 'collissions'
- In cases where there are 'collisions' between isochrone polygons, erase polygons with larger travel times with polygons associated with a different point that have lower travel times
- Where isochrone polygons of equal travel time intersect, find the centreline of the intersection and partition polygons according, as outlined [here](https://gis.stackexchange.com/questions/217151/how-to-align-edges-of-overlapping-polygons-in-the-middle-line)

# Alternative approaches

Another approach would be to iteratively sample points located between points to find locations that have roughly equal travel times.
From these 'equal travel time points' polygons can be constructed.

# Nearest hex cells

```{r}
hex_grid = stplanr::geo_projected(
  oldenburg_voronoi,
  st_make_grid,
  cellsize = 200,
  square = FALSE
)
tm_shape(hex_grid) + tm_polygons() +
  tm_shape(oldenburg_pubs) + tm_dots(col = "red", size = 0.8)
```

We'll iterate over every hex cell to find the nearest pub, first using nearest distances:

```{r}
hex_df = data.frame(name = NA)
hex_centroids = st_as_sf(st_centroid(hex_grid))
nearest_pubs = st_join(hex_centroids, oldenburg_pubs, join = nngeo::st_nn, k = 1, progress = FALSE)
hex_joined = st_sf(
  st_drop_geometry(nearest_pubs),
  geometry = hex_grid
)
voronoi_hex = hex_joined |>
  group_by(name) |>
  summarise(n = n())
tm_shape(voronoi_hex, bb = st_bbox(oldenburg_voronoi)) + tm_polygons(col = "name") +
  tm_shape(oldenburg_pubs) + tm_dots(col = "red", size = 0.8) +
  tm_shape(oldenburg_voronoi) + tm_borders(col = "blue", lwd = 5) +
  tm_layout(legend.outside = TRUE)
```

Next, we'll use travel times to find the nearest pub.
To minimise the number of requests, the strategy will be as follows:

1. Identify hex cells that touch the boundary between two or more territories

```{r}
inner_lines = rmapshaper::ms_innerlines(voronoi_hex)
voronoi_hex_boundary = hex_joined[inner_lines, ]
tm_shape(voronoi_hex, bb = st_bbox(oldenburg_voronoi)) + tm_polygons(col = "name") +
  tm_shape(voronoi_hex_boundary) + tm_fill(col = "grey", alpha = 0.8) +
  tm_shape(oldenburg_pubs) + tm_dots(col = "red", size = 0.8) +
  tm_shape(oldenburg_voronoi) + tm_borders(col = "blue", lwd = 5) +
  tm_layout(legend.outside = TRUE)
```

